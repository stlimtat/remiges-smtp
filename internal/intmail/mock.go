// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/stlimtat/remiges-smtp/internal/intmail (interfaces: IMailProcessor,IMailProcessorFactory)
//
// Generated by this command:
//
//	mockgen -destination=mock.go -package=intmail . IMailProcessor,IMailProcessorFactory
//

// Package intmail is a generated GoMock package.
package intmail

import (
	context "context"
	reflect "reflect"

	config "github.com/stlimtat/remiges-smtp/internal/config"
	pmail "github.com/stlimtat/remiges-smtp/pkg/pmail"
	gomock "go.uber.org/mock/gomock"
)

// MockIMailProcessor is a mock of IMailProcessor interface.
type MockIMailProcessor struct {
	ctrl     *gomock.Controller
	recorder *MockIMailProcessorMockRecorder
	isgomock struct{}
}

// MockIMailProcessorMockRecorder is the mock recorder for MockIMailProcessor.
type MockIMailProcessorMockRecorder struct {
	mock *MockIMailProcessor
}

// NewMockIMailProcessor creates a new mock instance.
func NewMockIMailProcessor(ctrl *gomock.Controller) *MockIMailProcessor {
	mock := &MockIMailProcessor{ctrl: ctrl}
	mock.recorder = &MockIMailProcessorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIMailProcessor) EXPECT() *MockIMailProcessorMockRecorder {
	return m.recorder
}

// Index mocks base method.
func (m *MockIMailProcessor) Index() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Index")
	ret0, _ := ret[0].(int)
	return ret0
}

// Index indicates an expected call of Index.
func (mr *MockIMailProcessorMockRecorder) Index() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Index", reflect.TypeOf((*MockIMailProcessor)(nil).Index))
}

// Init mocks base method.
func (m *MockIMailProcessor) Init(ctx context.Context, cfg config.MailProcessorConfig) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Init", ctx, cfg)
	ret0, _ := ret[0].(error)
	return ret0
}

// Init indicates an expected call of Init.
func (mr *MockIMailProcessorMockRecorder) Init(ctx, cfg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Init", reflect.TypeOf((*MockIMailProcessor)(nil).Init), ctx, cfg)
}

// Process mocks base method.
func (m *MockIMailProcessor) Process(ctx context.Context, myMail *pmail.Mail) (*pmail.Mail, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Process", ctx, myMail)
	ret0, _ := ret[0].(*pmail.Mail)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Process indicates an expected call of Process.
func (mr *MockIMailProcessorMockRecorder) Process(ctx, myMail any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Process", reflect.TypeOf((*MockIMailProcessor)(nil).Process), ctx, myMail)
}

// MockIMailProcessorFactory is a mock of IMailProcessorFactory interface.
type MockIMailProcessorFactory struct {
	ctrl     *gomock.Controller
	recorder *MockIMailProcessorFactoryMockRecorder
	isgomock struct{}
}

// MockIMailProcessorFactoryMockRecorder is the mock recorder for MockIMailProcessorFactory.
type MockIMailProcessorFactoryMockRecorder struct {
	mock *MockIMailProcessorFactory
}

// NewMockIMailProcessorFactory creates a new mock instance.
func NewMockIMailProcessorFactory(ctrl *gomock.Controller) *MockIMailProcessorFactory {
	mock := &MockIMailProcessorFactory{ctrl: ctrl}
	mock.recorder = &MockIMailProcessorFactoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIMailProcessorFactory) EXPECT() *MockIMailProcessorFactoryMockRecorder {
	return m.recorder
}

// NewMailProcessors mocks base method.
func (m *MockIMailProcessorFactory) NewMailProcessors(ctx context.Context, cfgs []config.MailProcessorConfig) ([]IMailProcessor, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewMailProcessors", ctx, cfgs)
	ret0, _ := ret[0].([]IMailProcessor)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewMailProcessors indicates an expected call of NewMailProcessors.
func (mr *MockIMailProcessorFactoryMockRecorder) NewMailProcessors(ctx, cfgs any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewMailProcessors", reflect.TypeOf((*MockIMailProcessorFactory)(nil).NewMailProcessors), ctx, cfgs)
}
