// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/stlimtat/remiges-smtp/internal/file (interfaces: IFileReader,IMailTransformer,IFileReadTracker)
//
// Generated by this command:
//
//	mockgen -destination=mock.go -package=file . IFileReader,IMailTransformer,IFileReadTracker
//

// Package file is a generated GoMock package.
package file

import (
	context "context"
	reflect "reflect"

	mail "github.com/stlimtat/remiges-smtp/internal/mail"
	input "github.com/stlimtat/remiges-smtp/pkg/input"
	gomock "go.uber.org/mock/gomock"
)

// MockIFileReader is a mock of IFileReader interface.
type MockIFileReader struct {
	ctrl     *gomock.Controller
	recorder *MockIFileReaderMockRecorder
	isgomock struct{}
}

// MockIFileReaderMockRecorder is the mock recorder for MockIFileReader.
type MockIFileReaderMockRecorder struct {
	mock *MockIFileReader
}

// NewMockIFileReader creates a new mock instance.
func NewMockIFileReader(ctrl *gomock.Controller) *MockIFileReader {
	mock := &MockIFileReader{ctrl: ctrl}
	mock.recorder = &MockIFileReaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIFileReader) EXPECT() *MockIFileReaderMockRecorder {
	return m.recorder
}

// ReadNextFile mocks base method.
func (m *MockIFileReader) ReadNextFile(ctx context.Context) (*FileInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadNextFile", ctx)
	ret0, _ := ret[0].(*FileInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadNextFile indicates an expected call of ReadNextFile.
func (mr *MockIFileReaderMockRecorder) ReadNextFile(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadNextFile", reflect.TypeOf((*MockIFileReader)(nil).ReadNextFile), ctx)
}

// RefreshList mocks base method.
func (m *MockIFileReader) RefreshList(ctx context.Context) ([]*FileInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RefreshList", ctx)
	ret0, _ := ret[0].([]*FileInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RefreshList indicates an expected call of RefreshList.
func (mr *MockIFileReaderMockRecorder) RefreshList(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RefreshList", reflect.TypeOf((*MockIFileReader)(nil).RefreshList), ctx)
}

// MockIMailTransformer is a mock of IMailTransformer interface.
type MockIMailTransformer struct {
	ctrl     *gomock.Controller
	recorder *MockIMailTransformerMockRecorder
	isgomock struct{}
}

// MockIMailTransformerMockRecorder is the mock recorder for MockIMailTransformer.
type MockIMailTransformerMockRecorder struct {
	mock *MockIMailTransformer
}

// NewMockIMailTransformer creates a new mock instance.
func NewMockIMailTransformer(ctrl *gomock.Controller) *MockIMailTransformer {
	mock := &MockIMailTransformer{ctrl: ctrl}
	mock.recorder = &MockIMailTransformerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIMailTransformer) EXPECT() *MockIMailTransformerMockRecorder {
	return m.recorder
}

// Transform mocks base method.
func (m *MockIMailTransformer) Transform(ctx context.Context, fileInfo *FileInfo) (*mail.Mail, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Transform", ctx, fileInfo)
	ret0, _ := ret[0].(*mail.Mail)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Transform indicates an expected call of Transform.
func (mr *MockIMailTransformerMockRecorder) Transform(ctx, fileInfo any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Transform", reflect.TypeOf((*MockIMailTransformer)(nil).Transform), ctx, fileInfo)
}

// MockIFileReadTracker is a mock of IFileReadTracker interface.
type MockIFileReadTracker struct {
	ctrl     *gomock.Controller
	recorder *MockIFileReadTrackerMockRecorder
	isgomock struct{}
}

// MockIFileReadTrackerMockRecorder is the mock recorder for MockIFileReadTracker.
type MockIFileReadTrackerMockRecorder struct {
	mock *MockIFileReadTracker
}

// NewMockIFileReadTracker creates a new mock instance.
func NewMockIFileReadTracker(ctrl *gomock.Controller) *MockIFileReadTracker {
	mock := &MockIFileReadTracker{ctrl: ctrl}
	mock.recorder = &MockIFileReadTrackerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIFileReadTracker) EXPECT() *MockIFileReadTrackerMockRecorder {
	return m.recorder
}

// FileRead mocks base method.
func (m *MockIFileReadTracker) FileRead(ctx context.Context, id string) (input.FileStatus, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FileRead", ctx, id)
	ret0, _ := ret[0].(input.FileStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FileRead indicates an expected call of FileRead.
func (mr *MockIFileReadTrackerMockRecorder) FileRead(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FileRead", reflect.TypeOf((*MockIFileReadTracker)(nil).FileRead), ctx, id)
}

// UpsertFile mocks base method.
func (m *MockIFileReadTracker) UpsertFile(ctx context.Context, id string, status input.FileStatus) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpsertFile", ctx, id, status)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpsertFile indicates an expected call of UpsertFile.
func (mr *MockIFileReadTrackerMockRecorder) UpsertFile(ctx, id, status any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertFile", reflect.TypeOf((*MockIFileReadTracker)(nil).UpsertFile), ctx, id, status)
}
