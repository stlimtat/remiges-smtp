// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/stlimtat/remiges-smtp/internal/crypto (interfaces: IKeyGenerator,IKeyLoader,IKeyWriter)
//
// Generated by this command:
//
//	mockgen -destination=mock.go -package=crypto . IKeyGenerator,IKeyLoader,IKeyWriter
//

// Package crypto is a generated GoMock package.
package crypto

import (
	context "context"
	crypto "crypto"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockIKeyGenerator is a mock of IKeyGenerator interface.
type MockIKeyGenerator struct {
	ctrl     *gomock.Controller
	recorder *MockIKeyGeneratorMockRecorder
	isgomock struct{}
}

// MockIKeyGeneratorMockRecorder is the mock recorder for MockIKeyGenerator.
type MockIKeyGeneratorMockRecorder struct {
	mock *MockIKeyGenerator
}

// NewMockIKeyGenerator creates a new mock instance.
func NewMockIKeyGenerator(ctrl *gomock.Controller) *MockIKeyGenerator {
	mock := &MockIKeyGenerator{ctrl: ctrl}
	mock.recorder = &MockIKeyGeneratorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIKeyGenerator) EXPECT() *MockIKeyGeneratorMockRecorder {
	return m.recorder
}

// GenerateKey mocks base method.
func (m *MockIKeyGenerator) GenerateKey(ctx context.Context, bitSize int, id, keyType string) ([]byte, []byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateKey", ctx, bitSize, id, keyType)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].([]byte)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GenerateKey indicates an expected call of GenerateKey.
func (mr *MockIKeyGeneratorMockRecorder) GenerateKey(ctx, bitSize, id, keyType any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateKey", reflect.TypeOf((*MockIKeyGenerator)(nil).GenerateKey), ctx, bitSize, id, keyType)
}

// MockIKeyLoader is a mock of IKeyLoader interface.
type MockIKeyLoader struct {
	ctrl     *gomock.Controller
	recorder *MockIKeyLoaderMockRecorder
	isgomock struct{}
}

// MockIKeyLoaderMockRecorder is the mock recorder for MockIKeyLoader.
type MockIKeyLoaderMockRecorder struct {
	mock *MockIKeyLoader
}

// NewMockIKeyLoader creates a new mock instance.
func NewMockIKeyLoader(ctrl *gomock.Controller) *MockIKeyLoader {
	mock := &MockIKeyLoader{ctrl: ctrl}
	mock.recorder = &MockIKeyLoaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIKeyLoader) EXPECT() *MockIKeyLoaderMockRecorder {
	return m.recorder
}

// LoadPrivateKey mocks base method.
func (m *MockIKeyLoader) LoadPrivateKey(ctx context.Context, keyType, privateKeyPath string) (crypto.Signer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadPrivateKey", ctx, keyType, privateKeyPath)
	ret0, _ := ret[0].(crypto.Signer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoadPrivateKey indicates an expected call of LoadPrivateKey.
func (mr *MockIKeyLoaderMockRecorder) LoadPrivateKey(ctx, keyType, privateKeyPath any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadPrivateKey", reflect.TypeOf((*MockIKeyLoader)(nil).LoadPrivateKey), ctx, keyType, privateKeyPath)
}

// MockIKeyWriter is a mock of IKeyWriter interface.
type MockIKeyWriter struct {
	ctrl     *gomock.Controller
	recorder *MockIKeyWriterMockRecorder
	isgomock struct{}
}

// MockIKeyWriterMockRecorder is the mock recorder for MockIKeyWriter.
type MockIKeyWriterMockRecorder struct {
	mock *MockIKeyWriter
}

// NewMockIKeyWriter creates a new mock instance.
func NewMockIKeyWriter(ctrl *gomock.Controller) *MockIKeyWriter {
	mock := &MockIKeyWriter{ctrl: ctrl}
	mock.recorder = &MockIKeyWriterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIKeyWriter) EXPECT() *MockIKeyWriterMockRecorder {
	return m.recorder
}

// WriteKey mocks base method.
func (m *MockIKeyWriter) WriteKey(ctx context.Context, id string, publicKeyPEM, privateKeyPEM []byte) (string, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteKey", ctx, id, publicKeyPEM, privateKeyPEM)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// WriteKey indicates an expected call of WriteKey.
func (mr *MockIKeyWriterMockRecorder) WriteKey(ctx, id, publicKeyPEM, privateKeyPEM any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteKey", reflect.TypeOf((*MockIKeyWriter)(nil).WriteKey), ctx, id, publicKeyPEM, privateKeyPEM)
}
