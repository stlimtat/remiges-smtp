// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/stlimtat/remiges-smtp/internal/output (interfaces: IOutput,IOutputFactory)
//
// Generated by this command:
//
//	mockgen -destination=mock.go -package=output github.com/stlimtat/remiges-smtp/internal/output IOutput,IOutputFactory
//

// Package output is a generated GoMock package.
package output

import (
	context "context"
	reflect "reflect"

	config "github.com/stlimtat/remiges-smtp/internal/config"
	pmail "github.com/stlimtat/remiges-smtp/pkg/pmail"
	gomock "go.uber.org/mock/gomock"
)

// MockIOutput is a mock of IOutput interface.
type MockIOutput struct {
	ctrl     *gomock.Controller
	recorder *MockIOutputMockRecorder
	isgomock struct{}
}

// MockIOutputMockRecorder is the mock recorder for MockIOutput.
type MockIOutputMockRecorder struct {
	mock *MockIOutput
}

// NewMockIOutput creates a new mock instance.
func NewMockIOutput(ctrl *gomock.Controller) *MockIOutput {
	mock := &MockIOutput{ctrl: ctrl}
	mock.recorder = &MockIOutputMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIOutput) EXPECT() *MockIOutputMockRecorder {
	return m.recorder
}

// Write mocks base method.
func (m *MockIOutput) Write(ctx context.Context, myMail *pmail.Mail, responses []pmail.Response) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Write", ctx, myMail, responses)
	ret0, _ := ret[0].(error)
	return ret0
}

// Write indicates an expected call of Write.
func (mr *MockIOutputMockRecorder) Write(ctx, myMail, responses any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Write", reflect.TypeOf((*MockIOutput)(nil).Write), ctx, myMail, responses)
}

// MockIOutputFactory is a mock of IOutputFactory interface.
type MockIOutputFactory struct {
	ctrl     *gomock.Controller
	recorder *MockIOutputFactoryMockRecorder
	isgomock struct{}
}

// MockIOutputFactoryMockRecorder is the mock recorder for MockIOutputFactory.
type MockIOutputFactoryMockRecorder struct {
	mock *MockIOutputFactory
}

// NewMockIOutputFactory creates a new mock instance.
func NewMockIOutputFactory(ctrl *gomock.Controller) *MockIOutputFactory {
	mock := &MockIOutputFactory{ctrl: ctrl}
	mock.recorder = &MockIOutputFactoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIOutputFactory) EXPECT() *MockIOutputFactoryMockRecorder {
	return m.recorder
}

// NewOutputs mocks base method.
func (m *MockIOutputFactory) NewOutputs(ctx context.Context, cfgs []config.OutputConfig) ([]IOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewOutputs", ctx, cfgs)
	ret0, _ := ret[0].([]IOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewOutputs indicates an expected call of NewOutputs.
func (mr *MockIOutputFactoryMockRecorder) NewOutputs(ctx, cfgs any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewOutputs", reflect.TypeOf((*MockIOutputFactory)(nil).NewOutputs), ctx, cfgs)
}
