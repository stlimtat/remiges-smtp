// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/stlimtat/remiges-smtp/internal/file_mail (interfaces: IMailTransformer)
//
// Generated by this command:
//
//	mockgen -destination=mock.go -package=file_mail . IMailTransformer
//

// Package file_mail is a generated GoMock package.
package file_mail

import (
	context "context"
	reflect "reflect"

	file "github.com/stlimtat/remiges-smtp/internal/file"
	mail "github.com/stlimtat/remiges-smtp/internal/mail"
	gomock "go.uber.org/mock/gomock"
)

// MockIMailTransformer is a mock of IMailTransformer interface.
type MockIMailTransformer struct {
	ctrl     *gomock.Controller
	recorder *MockIMailTransformerMockRecorder
	isgomock struct{}
}

// MockIMailTransformerMockRecorder is the mock recorder for MockIMailTransformer.
type MockIMailTransformerMockRecorder struct {
	mock *MockIMailTransformer
}

// NewMockIMailTransformer creates a new mock instance.
func NewMockIMailTransformer(ctrl *gomock.Controller) *MockIMailTransformer {
	mock := &MockIMailTransformer{ctrl: ctrl}
	mock.recorder = &MockIMailTransformerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIMailTransformer) EXPECT() *MockIMailTransformerMockRecorder {
	return m.recorder
}

// Transform mocks base method.
func (m *MockIMailTransformer) Transform(ctx context.Context, fileInfo *file.FileInfo, myMail *mail.Mail) (*mail.Mail, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Transform", ctx, fileInfo, myMail)
	ret0, _ := ret[0].(*mail.Mail)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Transform indicates an expected call of Transform.
func (mr *MockIMailTransformerMockRecorder) Transform(ctx, fileInfo, myMail any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Transform", reflect.TypeOf((*MockIMailTransformer)(nil).Transform), ctx, fileInfo, myMail)
}
