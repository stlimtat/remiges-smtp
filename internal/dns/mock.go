// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/stlimtat/remiges-smtp/internal/dns (interfaces: IResolver)
//
// Generated by this command:
//
//	mockgen -destination=mock.go -package=dns . IResolver
//

// Package dns is a generated GoMock package.
package dns

import (
	context "context"
	reflect "reflect"

	dns "github.com/mjl-/mox/dns"
	gomock "go.uber.org/mock/gomock"
)

// MockIResolver is a mock of IResolver interface.
type MockIResolver struct {
	ctrl     *gomock.Controller
	recorder *MockIResolverMockRecorder
	isgomock struct{}
}

// MockIResolverMockRecorder is the mock recorder for MockIResolver.
type MockIResolverMockRecorder struct {
	mock *MockIResolver
}

// NewMockIResolver creates a new mock instance.
func NewMockIResolver(ctrl *gomock.Controller) *MockIResolver {
	mock := &MockIResolver{ctrl: ctrl}
	mock.recorder = &MockIResolverMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIResolver) EXPECT() *MockIResolverMockRecorder {
	return m.recorder
}

// LookupMX mocks base method.
func (m *MockIResolver) LookupMX(ctx context.Context, domain dns.Domain) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LookupMX", ctx, domain)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LookupMX indicates an expected call of LookupMX.
func (mr *MockIResolverMockRecorder) LookupMX(ctx, domain any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LookupMX", reflect.TypeOf((*MockIResolver)(nil).LookupMX), ctx, domain)
}
