// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/stlimtat/remiges-smtp/internal/sendmail (interfaces: INetDialer,IResolver,IMailSender)
//
// Generated by this command:
//
//	mockgen -destination=sendmail_mock.go -package=sendmail . INetDialer,IResolver,IMailSender
//

// Package sendmail is a generated GoMock package.
package sendmail

import (
	context "context"
	net "net"
	reflect "reflect"

	adns "github.com/mjl-/adns"
	dns "github.com/mjl-/mox/dns"
	gomock "go.uber.org/mock/gomock"
)

// MockINetDialer is a mock of INetDialer interface.
type MockINetDialer struct {
	ctrl     *gomock.Controller
	recorder *MockINetDialerMockRecorder
	isgomock struct{}
}

// MockINetDialerMockRecorder is the mock recorder for MockINetDialer.
type MockINetDialerMockRecorder struct {
	mock *MockINetDialer
}

// NewMockINetDialer creates a new mock instance.
func NewMockINetDialer(ctrl *gomock.Controller) *MockINetDialer {
	mock := &MockINetDialer{ctrl: ctrl}
	mock.recorder = &MockINetDialerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockINetDialer) EXPECT() *MockINetDialerMockRecorder {
	return m.recorder
}

// Dial mocks base method.
func (m *MockINetDialer) Dial(network, address string) (net.Conn, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Dial", network, address)
	ret0, _ := ret[0].(net.Conn)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Dial indicates an expected call of Dial.
func (mr *MockINetDialerMockRecorder) Dial(network, address any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Dial", reflect.TypeOf((*MockINetDialer)(nil).Dial), network, address)
}

// MockIResolver is a mock of IResolver interface.
type MockIResolver struct {
	ctrl     *gomock.Controller
	recorder *MockIResolverMockRecorder
	isgomock struct{}
}

// MockIResolverMockRecorder is the mock recorder for MockIResolver.
type MockIResolverMockRecorder struct {
	mock *MockIResolver
}

// NewMockIResolver creates a new mock instance.
func NewMockIResolver(ctrl *gomock.Controller) *MockIResolver {
	mock := &MockIResolver{ctrl: ctrl}
	mock.recorder = &MockIResolverMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIResolver) EXPECT() *MockIResolverMockRecorder {
	return m.recorder
}

// LookupMX mocks base method.
func (m *MockIResolver) LookupMX(ctx context.Context, name string) ([]*net.MX, adns.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LookupMX", ctx, name)
	ret0, _ := ret[0].([]*net.MX)
	ret1, _ := ret[1].(adns.Result)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// LookupMX indicates an expected call of LookupMX.
func (mr *MockIResolverMockRecorder) LookupMX(ctx, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LookupMX", reflect.TypeOf((*MockIResolver)(nil).LookupMX), ctx, name)
}

// MockIMailSender is a mock of IMailSender interface.
type MockIMailSender struct {
	ctrl     *gomock.Controller
	recorder *MockIMailSenderMockRecorder
	isgomock struct{}
}

// MockIMailSenderMockRecorder is the mock recorder for MockIMailSender.
type MockIMailSenderMockRecorder struct {
	mock *MockIMailSender
}

// NewMockIMailSender creates a new mock instance.
func NewMockIMailSender(ctrl *gomock.Controller) *MockIMailSender {
	mock := &MockIMailSender{ctrl: ctrl}
	mock.recorder = &MockIMailSenderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIMailSender) EXPECT() *MockIMailSenderMockRecorder {
	return m.recorder
}

// LookupMX mocks base method.
func (m *MockIMailSender) LookupMX(ctx context.Context, domain dns.Domain) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LookupMX", ctx, domain)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LookupMX indicates an expected call of LookupMX.
func (mr *MockIMailSenderMockRecorder) LookupMX(ctx, domain any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LookupMX", reflect.TypeOf((*MockIMailSender)(nil).LookupMX), ctx, domain)
}

// NewConn mocks base method.
func (m *MockIMailSender) NewConn(ctx context.Context) (net.Conn, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewConn", ctx)
	ret0, _ := ret[0].(net.Conn)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewConn indicates an expected call of NewConn.
func (mr *MockIMailSenderMockRecorder) NewConn(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewConn", reflect.TypeOf((*MockIMailSender)(nil).NewConn), ctx)
}
