// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/mjl-/mox/dns (interfaces: Resolver)
//
// Generated by this command:
//
//	mockgen -destination=dns_mock.go -package=sendmail github.com/mjl-/mox/dns Resolver
//

// Package sendmail is a generated GoMock package.
package sendmail

import (
	context "context"
	net "net"
	reflect "reflect"

	adns "github.com/mjl-/adns"
	gomock "go.uber.org/mock/gomock"
)

// MockResolver is a mock of Resolver interface.
type MockResolver struct {
	ctrl     *gomock.Controller
	recorder *MockResolverMockRecorder
	isgomock struct{}
}

// MockResolverMockRecorder is the mock recorder for MockResolver.
type MockResolverMockRecorder struct {
	mock *MockResolver
}

// NewMockResolver creates a new mock instance.
func NewMockResolver(ctrl *gomock.Controller) *MockResolver {
	mock := &MockResolver{ctrl: ctrl}
	mock.recorder = &MockResolverMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockResolver) EXPECT() *MockResolverMockRecorder {
	return m.recorder
}

// LookupAddr mocks base method.
func (m *MockResolver) LookupAddr(ctx context.Context, addr string) ([]string, adns.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LookupAddr", ctx, addr)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(adns.Result)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// LookupAddr indicates an expected call of LookupAddr.
func (mr *MockResolverMockRecorder) LookupAddr(ctx, addr any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LookupAddr", reflect.TypeOf((*MockResolver)(nil).LookupAddr), ctx, addr)
}

// LookupCNAME mocks base method.
func (m *MockResolver) LookupCNAME(ctx context.Context, host string) (string, adns.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LookupCNAME", ctx, host)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(adns.Result)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// LookupCNAME indicates an expected call of LookupCNAME.
func (mr *MockResolverMockRecorder) LookupCNAME(ctx, host any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LookupCNAME", reflect.TypeOf((*MockResolver)(nil).LookupCNAME), ctx, host)
}

// LookupHost mocks base method.
func (m *MockResolver) LookupHost(ctx context.Context, host string) ([]string, adns.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LookupHost", ctx, host)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(adns.Result)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// LookupHost indicates an expected call of LookupHost.
func (mr *MockResolverMockRecorder) LookupHost(ctx, host any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LookupHost", reflect.TypeOf((*MockResolver)(nil).LookupHost), ctx, host)
}

// LookupIP mocks base method.
func (m *MockResolver) LookupIP(ctx context.Context, network, host string) ([]net.IP, adns.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LookupIP", ctx, network, host)
	ret0, _ := ret[0].([]net.IP)
	ret1, _ := ret[1].(adns.Result)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// LookupIP indicates an expected call of LookupIP.
func (mr *MockResolverMockRecorder) LookupIP(ctx, network, host any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LookupIP", reflect.TypeOf((*MockResolver)(nil).LookupIP), ctx, network, host)
}

// LookupIPAddr mocks base method.
func (m *MockResolver) LookupIPAddr(ctx context.Context, host string) ([]net.IPAddr, adns.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LookupIPAddr", ctx, host)
	ret0, _ := ret[0].([]net.IPAddr)
	ret1, _ := ret[1].(adns.Result)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// LookupIPAddr indicates an expected call of LookupIPAddr.
func (mr *MockResolverMockRecorder) LookupIPAddr(ctx, host any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LookupIPAddr", reflect.TypeOf((*MockResolver)(nil).LookupIPAddr), ctx, host)
}

// LookupMX mocks base method.
func (m *MockResolver) LookupMX(ctx context.Context, name string) ([]*net.MX, adns.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LookupMX", ctx, name)
	ret0, _ := ret[0].([]*net.MX)
	ret1, _ := ret[1].(adns.Result)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// LookupMX indicates an expected call of LookupMX.
func (mr *MockResolverMockRecorder) LookupMX(ctx, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LookupMX", reflect.TypeOf((*MockResolver)(nil).LookupMX), ctx, name)
}

// LookupNS mocks base method.
func (m *MockResolver) LookupNS(ctx context.Context, name string) ([]*net.NS, adns.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LookupNS", ctx, name)
	ret0, _ := ret[0].([]*net.NS)
	ret1, _ := ret[1].(adns.Result)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// LookupNS indicates an expected call of LookupNS.
func (mr *MockResolverMockRecorder) LookupNS(ctx, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LookupNS", reflect.TypeOf((*MockResolver)(nil).LookupNS), ctx, name)
}

// LookupPort mocks base method.
func (m *MockResolver) LookupPort(ctx context.Context, network, service string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LookupPort", ctx, network, service)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LookupPort indicates an expected call of LookupPort.
func (mr *MockResolverMockRecorder) LookupPort(ctx, network, service any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LookupPort", reflect.TypeOf((*MockResolver)(nil).LookupPort), ctx, network, service)
}

// LookupSRV mocks base method.
func (m *MockResolver) LookupSRV(ctx context.Context, service, proto, name string) (string, []*net.SRV, adns.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LookupSRV", ctx, service, proto, name)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].([]*net.SRV)
	ret2, _ := ret[2].(adns.Result)
	ret3, _ := ret[3].(error)
	return ret0, ret1, ret2, ret3
}

// LookupSRV indicates an expected call of LookupSRV.
func (mr *MockResolverMockRecorder) LookupSRV(ctx, service, proto, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LookupSRV", reflect.TypeOf((*MockResolver)(nil).LookupSRV), ctx, service, proto, name)
}

// LookupTLSA mocks base method.
func (m *MockResolver) LookupTLSA(ctx context.Context, port int, protocol, host string) ([]adns.TLSA, adns.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LookupTLSA", ctx, port, protocol, host)
	ret0, _ := ret[0].([]adns.TLSA)
	ret1, _ := ret[1].(adns.Result)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// LookupTLSA indicates an expected call of LookupTLSA.
func (mr *MockResolverMockRecorder) LookupTLSA(ctx, port, protocol, host any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LookupTLSA", reflect.TypeOf((*MockResolver)(nil).LookupTLSA), ctx, port, protocol, host)
}

// LookupTXT mocks base method.
func (m *MockResolver) LookupTXT(ctx context.Context, name string) ([]string, adns.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LookupTXT", ctx, name)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(adns.Result)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// LookupTXT indicates an expected call of LookupTXT.
func (mr *MockResolverMockRecorder) LookupTXT(ctx, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LookupTXT", reflect.TypeOf((*MockResolver)(nil).LookupTXT), ctx, name)
}
