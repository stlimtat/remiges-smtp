// Code generated by MockGen. DO NOT EDIT.
// Source: interface.go
//
// Generated by this command:
//
//	mockgen -destination=mock.go -package=input -source=interface.go
//

// Package input is a generated GoMock package.
package input

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockIFileReader is a mock of IFileReader interface.
type MockIFileReader struct {
	ctrl     *gomock.Controller
	recorder *MockIFileReaderMockRecorder
	isgomock struct{}
}

// MockIFileReaderMockRecorder is the mock recorder for MockIFileReader.
type MockIFileReaderMockRecorder struct {
	mock *MockIFileReader
}

// NewMockIFileReader creates a new mock instance.
func NewMockIFileReader(ctrl *gomock.Controller) *MockIFileReader {
	mock := &MockIFileReader{ctrl: ctrl}
	mock.recorder = &MockIFileReaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIFileReader) EXPECT() *MockIFileReaderMockRecorder {
	return m.recorder
}

// ReadNextFile mocks base method.
func (m *MockIFileReader) ReadNextFile(ctx context.Context) (*FileInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadNextFile", ctx)
	ret0, _ := ret[0].(*FileInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadNextFile indicates an expected call of ReadNextFile.
func (mr *MockIFileReaderMockRecorder) ReadNextFile(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadNextFile", reflect.TypeOf((*MockIFileReader)(nil).ReadNextFile), ctx)
}

// RefreshList mocks base method.
func (m *MockIFileReader) RefreshList(ctx context.Context) ([]*FileInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RefreshList", ctx)
	ret0, _ := ret[0].([]*FileInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RefreshList indicates an expected call of RefreshList.
func (mr *MockIFileReaderMockRecorder) RefreshList(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RefreshList", reflect.TypeOf((*MockIFileReader)(nil).RefreshList), ctx)
}
